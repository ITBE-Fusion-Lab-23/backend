import mongoose from "mongoose";
import { Schema } from "mongoose";

export const ReviewSchema = new Schema({
  _id: {
    type: mongoose.Schema.Types.ObjectId,
    immutable: true,
  },
  stakeholder: {
    type: String,
    enum: [
      "Government and Planning Authority",
      "Environmental Group",
      "Local Resident",
      "Transportation Department",
      "Construction and Engineering Firm",
      "Financial and Investment Parties",
      "Public Safety and Heath Departments",
      "Commuter",
    ],
  },
  rating: {
    type: Number,
    require: true,
    min: 1,
    max: 5,
  },
  component: {
    type: String,
    require: true,
    enum: [
      "Overall",
      "Pedestrian space",
      "Road",
      "Access to public transport",
      "Structure",
    ],
  },
  comment: String,
  date: {
    type: Date,
    required: true,
    default: Date.now(),
  },
  likes: {
    type: Number,
    default: 0,
  },
  modelGroupId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "ModelGroup",
    required: true,
  },
});

//Create mongoose model based on pre-defined imported schema
export const ReviewModel = mongoose.model("Review", ReviewSchema);

/**
 * @swagger
 * components:
 *  schemas:
 *    Review:
 *      type: object
 *      required:
 *        - rating
 *        - modelGroupId
 *      properties:
 *        id:
 *          type: string
 *          description: The MongoDB autogenerated ID of the review.
 *          example: 1230-490f-da29-94hf
 *        stakeholder:
 *          type: string
 *          description: The stakeholder group which the user belongs to.
 *          enum: [Government and Planning Authority,Environmental Group,Local Resident,Transportation Department,Construction and Engineering Firm,Financial and Investment Parties,Public Safety and Heath Departments,Commuter]
 *        rating:
 *          type: number
 *          description: The rating the user gives for a specific component (ranges from 1 to 5).
 *          minimum: 1
 *          maximum: 5
 *        component:
 *          type: string
 *          description: The component to which the review refers to.
 *          enum: [Overall,Pedestrian space,Road,Access to public transport,Structure]
 *        comment:
 *          type: string
 *          description: The comment the user gives for a specific component.
 *          example: This is a comment.
 *        date:
 *          type: string
 *          format: date-time
 *          description: The date when the review is published to the database (autogenerated in backend).
 *        likes:
 *          type: number
 *          description: The number of users who likes this review.
 *        modelGroupId:
 *          type: string
 *          description: The ID of the group's IFC model the review is referring to.
 */
/**
 * @swagger
 * tags:
 *   - name: Reviews
 *     description: The reviews managing API
 *   - name: ModelGroup
 *     description: The model managing API
 * /:
 *   get:
 *     summary: Test the base endpoint.
 * /reviews/{modelGroup}:
 *   get:
 *     summary: Get the reviews by modelGroup.
 *     tags: [Reviews]
 *     parameters:
 *       - in: path
 *         name: modelGroup
 *         required: true
 *         schema:
 *           type: string
 *         description: The model group name
 *     responses:
 *       200:
 *         description: The review filtered by the group's IFC model.
 *         content:
 *           application/json:
 *             schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Review'
 *   post:
 *     summary: Post a review based on modelGroup and its component
 *     tags: [Reviews]
 *     parameters:
 *     - in: path
 *       name: modelGroup
 *       required: true
 *       schema:
 *         type: string
 *       description: The model group name.
 *     requestBody:
 *       description: The request body that goes with the POST request.
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               stakeholder:
 *                 type: string
 *                 enum: [Government and Planning Authority,Environmental Group,Local Resident,Transportation Department,Construction and Engineering Firm,Financial and Investment Parties,Public Safety and Heath Departments,Commuter]
 *               rating:
 *                 type: number
 *                 minimum: 1
 *                 maximum: 5
 *               comment:
 *                 type: string
 *                 example: This is a comment.
 *               component:
 *                 type: string
 *                 enum: [Overall,Pedestrian space,Road,Access to public transport,Structure]
 *     responses:
 *       201:
 *         description: Successful creation of the review in the database.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Handling POST request to /reviews
 *                 createdReview:
 *                   type: object
 *                   $ref: '#/components/schemas/Review'
 *       404:
 *         description: No object found with specified model group and component.
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               example: No object found with specified model group and component.
 *       500:
 *         description: Internal server error.
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               example: Internal server error.
 *
 * /modelGroup/{modelGroup}:
 *   put:
 *     summary: Increments the vote for the specified modelGroup
 *     tags: [ModelGroup]
 *     parameters:
 *     - in: path
 *       name: modelGroup
 *       required: true
 *       schema:
 *         type: string
 *         description: The model group which the vote should be incremented for.
 *     responses:
 *       200:
 *         description: Successful update of the vote count for the specified model group.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                  message:
 *                    type: string
 *                    example: Handling PUT request to /modelGroup
 *                  updatedModelGroup:
 *                    type: object
 *                    $ref: '#/components/schemas/ModelGroup'
 *       400:
 *         description: Bad request
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               example: No model gound with specified model group
 *
 *
 *
 *
 */
