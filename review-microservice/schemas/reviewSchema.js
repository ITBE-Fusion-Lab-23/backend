import mongoose from "mongoose";
import { Schema } from "mongoose";
import { ModelGroupModel } from "./ModelSchema.js";

export const ReviewSchema = new Schema({
    _id: {
        type: mongoose.Schema.Types.ObjectId,
        immutable: true
    },
    email: {
        type: String,
        require: true
    },
    ageGroup: {
        type: Number,
        min: 1,
        max: 10
    },
    rating: {
        type: Number,
        require: true,
        min:1,
        max:5
    },
    comment: String,
    date: {
        type: Date,
        default: Date.now()
    },
    modelGroupId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "ModelGroup",
        required:true
    }
})


/**
 * @swagger
 * components:
 *  schemas:
 *    Review:
 *      type: object
 *      required:
 *        - email
 *        - rating
 *        - bridgePart
 *        - modelGroupId
 *      properties:
 *        id:
 *          type: string
 *          description: The MongoDB autogenerated ID of the review.
 *        ageGroup:
 *          type: number
 *          description: The age group of user (ranges from 1 to 10).
 *          minimum: 1
 *          maximum: 10
 *        rating:
 *          type: number
 *          description: The rating the user gives for a specific bridge part (ranges from 1 to 5).
 *          minimum: 1
 *          maximum: 5
 *        comment:
 *          type: string
 *          description: The comment the user gives for a specific bridge part.
 *        date:
 *          type: string
 *          format: date-time
 *          description: The date when the review is published to the database (autogenerated in backend).
 *        modelGroupId:
 *          type: string
 *          description: The ID of the group's IFC model the review is referring to.
 */
/**
 * @swagger
 * tags:
 *   name: Reviews
 *   description: The reviews managing API
 * /:
 *   get:
 *     summary: Test the base endpoint.
 * /reviews/{modelGroup}:
 *   get:
 *     summary: Get the reviews by modelGroup.
 *     tags: [Reviews]
 *     parameters:
 *       - in: path
 *         name: modelGroup
 *         required: true
 *         schema:
 *           type: string
 *         description: The model group name
 *     responses:
 *       200:
 *         description: The review filtered by the group's IFC model.
 *         content:
 *           application/json:
 *             schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Review'
 * /reviews/{modelGroup}/{bridgePart}:
 *   post:
 *     summary: Post a review based on modelGroup and its bridgePart
 *     tags: [Reviews]
 *     parameters:
 *     - in: path
 *       name: modelGroup
 *       required: true
 *       schema:
 *         type: string
 *       description: The model group name.
 *     - in: path
 *       name: bridgePart
 *       required: true
 *       schema:
 *         type: string
 *       description: The bridge part of the specified model group.
 *     responses:
 *       201:
 *         description: Successful creation of the review in the database.
 *         content: 
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                 createdReview:
 *                   type: object
 *                   $ref: '#/components/schemas/Review'
 *       404:
 *         description: No object found with specified model group and bridge part.
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *       500:
 *         description: Internal server error.
 *         content:
 *           text/plain:
 *             schema:
 *               type: string   
 */